#include <iostream>
#include <queue>
using namespace std;
class Node{
    public:
    int data;
    Node* left;
    Node* right;

    Node(int d){
        data=d;
        left=NULL;
        right=NULL;
    }
};
int search(int Inorder[],int curr,int start,int end){
    for(int i=start;i<=end;i++){
        if(Inorder[i]==curr){
            return i;
        }
    }
    return -1;
}
Node* BuildTree(int PostOrder[],int Inorder[],int start,int end){
    static int Indx=4;
    if(start>end){
        return NULL;
    } 
    int curr=PostOrder[Indx];
    Indx--;
    Node* node=new Node(curr);
    if(start==end){
        return node;
    }
    int pos=search(Inorder,curr,start,end);
    node->right=BuildTree(PostOrder,Inorder,pos+1,end);
    node->left=BuildTree(PostOrder,Inorder,start,pos-1);
    return node;
}
void printLevelOrder(Node* root){
    queue<Node*>que;
    que.push(root);
    que.push(NULL);
    while(!que.empty()){
        Node* node=que.front();
        que.pop();
        if(node!=NULL){
            cout<<node->data<<" ";
            if(node->left){
                que.push(node->left);
            }
            if(node->right){
                que.push(node->right);
            }
        }
        else if(!que.empty()){
            que.push(NULL);
        }
    }
}
int SumATKthLevel(Node* root,int k){
    if(root==NULL){
        return -1;
    }
    queue<Node*>que;
    que.push(root);
    que.push(NULL);
    int level=0;
    int sum=0;
    while(!que.empty()){
        Node* node=que.front();
        que.pop();
        if(node!=NULL){
            if(level==k){
                sum+=node->data;
            }
            if(node->left){
                que.push(node->left);
            }
            if(node->right){
                que.push(node->right);
            }
        }
        else if(!que.empty()){
            que.push(NULL);
            level++;
        }
    }
    return sum;
}
void printPre(Node* root){
    if(root==NULL){
        return ;
    }
    cout<<root->data<<" ";
    printPre(root->left);
    printPre(root->right);
}
void printPost(Node* root){
    if(root==NULL){
        return ;
    }
    printPost(root->left);
    printPost(root->right);
    cout<<root->data<<" ";
}
void printIn(Node* root){
    if(root==NULL){
        return ;
    }
    printIn(root->left);
    cout<<root->data<<" ";
    printIn(root->right);
}
int main()
{
    int Postorder[]={4,2,5,3,1};
    int Inorder[]={4,2,1,5,3};
    Node* root=BuildTree(Postorder,Inorder,0,4);
    cout<<"Preorder :";printPre(root);cout<<endl;

    cout<<"Inorder :";printIn(root);cout<<endl;
    
    cout<<"Postorder :";printPost(root);cout<<endl;
    
    cout<<"LevelOrder :";printLevelOrder(root);cout<<endl;
    int k;
    cout<<"Enter the value of K :";cin>>k;
    cout<<"Sum of nodes at Kth node is :";cout<<SumATKthLevel(root,k)<<endl;
    
    return 0;
}
